!function (e) { var t, a = { version: "1.0.6", protocol: location.protocol.match(/https/i) ? "https" : "http", loaded: !1, live: !1, userMedia: !0, params: { width: 0, height: 0, dest_width: 0, dest_height: 0, image_format: "jpeg", jpeg_quality: 90, force_flash: !1, flip_horiz: !1, fps: 30, upload_name: "webcam", constraints: null, swfURL: "", flashNotDetectedText: "ERROR: No Adobe Flash Player detected.  Webcam.js relies on Flash for browsers that do not support getUserMedia (like yours)." }, hooks: {}, init: function () { var t = this; this.mediaDevices = navigator.mediaDevices && navigator.mediaDevices.getUserMedia ? navigator.mediaDevices : navigator.mozGetUserMedia || navigator.webkitGetUserMedia ? { getUserMedia: function (e) { return new Promise(function (t, a) { (navigator.mozGetUserMedia || navigator.webkitGetUserMedia).call(navigator, e, t, a) }) } } : null, e.URL = e.URL || e.webkitURL || e.mozURL || e.msURL, this.userMedia = this.userMedia && !!this.mediaDevices && !!e.URL, navigator.userAgent.match(/Firefox\D+(\d+)/) && parseInt(RegExp.$1, 10) < 21 && (this.userMedia = null), this.userMedia && e.addEventListener("beforeunload", function (e) { t.reset() }) }, attach: function (s) { if ("string" == typeof s && (s = document.getElementById(s) || document.querySelector(s)), !s) return this.dispatch("error", "Could not locate DOM element to attach to."); this.container = s, s.innerHTML = ""; var i = document.createElement("div"); s.appendChild(i), this.peg = i, this.params.width || (this.params.width = s.offsetWidth), this.params.height || (this.params.height = s.offsetHeight), this.params.dest_width || (this.params.dest_width = this.params.width), this.params.dest_height || (this.params.dest_height = this.params.height), this.userMedia = void 0 === t ? this.userMedia : t, this.params.force_flash && (t = this.userMedia, this.userMedia = null), "number" != typeof this.params.fps && (this.params.fps = 30); var r = this.params.width / this.params.dest_width, o = this.params.height / this.params.dest_height; if (this.userMedia) { var h = document.createElement("video"); h.setAttribute("autoplay", "autoplay"), h.style.width = "" + this.params.dest_width + "px", h.style.height = "" + this.params.dest_height + "px", (1 != r || 1 != o) && (s.style.overflow = "hidden", h.style.webkitTransformOrigin = "0px 0px", h.style.mozTransformOrigin = "0px 0px", h.style.msTransformOrigin = "0px 0px", h.style.oTransformOrigin = "0px 0px", h.style.transformOrigin = "0px 0px", h.style.webkitTransform = "scaleX(" + r + ") scaleY(" + o + ")", h.style.mozTransform = "scaleX(" + r + ") scaleY(" + o + ")", h.style.msTransform = "scaleX(" + r + ") scaleY(" + o + ")", h.style.oTransform = "scaleX(" + r + ") scaleY(" + o + ")", h.style.transform = "scaleX(" + r + ") scaleY(" + o + ")"), s.appendChild(h), this.video = h; var n = this; this.mediaDevices.getUserMedia({ audio: !1, video: this.params.constraints || { mandatory: { minWidth: this.params.dest_width, minHeight: this.params.dest_height } } }).then(function (t) { h.src = e.URL.createObjectURL(t) || t, n.stream = t, n.loaded = !0, n.live = !0, n.dispatch("load"), n.dispatch("live"), n.flip() })["catch"](function (e) { return n.dispatch("error", "Could not access webcam: " + e.name + ": " + e.message, e) }) } else { e.Webcam = a; var l = document.createElement("div"); l.innerHTML = this.getSWFHTML(), s.appendChild(l) } if (this.params.crop_width && this.params.crop_height) { var c = Math.floor(this.params.crop_width * r), p = Math.floor(this.params.crop_height * o); s.style.width = "" + c + "px", s.style.height = "" + p + "px", s.style.overflow = "hidden", s.scrollLeft = Math.floor(this.params.width / 2 - c / 2), s.scrollTop = Math.floor(this.params.height / 2 - p / 2) } else s.style.width = "" + this.params.width + "px", s.style.height = "" + this.params.height + "px" }, reset: function () { if (this.preview_active && this.unfreeze(), this.unflip(), this.userMedia) { if (this.stream) if (this.stream.getVideoTracks) { var e = this.stream.getVideoTracks(); e && e[0] && e[0].stop && e[0].stop() } else this.stream.stop && this.stream.stop(); delete this.stream, delete this.video } this.userMedia !== !0 && this.getMovie()._releaseCamera(), this.container && (this.container.innerHTML = "", delete this.container), this.loaded = !1, this.live = !1 }, set: function () { if (1 == arguments.length) for (var e in arguments[0]) this.params[e] = arguments[0][e]; else this.params[arguments[0]] = arguments[1] }, on: function (e, t) { e = e.replace(/^on/i, "").toLowerCase(), this.hooks[e] || (this.hooks[e] = []), this.hooks[e].push(t) }, off: function (e, t) { if (e = e.replace(/^on/i, "").toLowerCase(), this.hooks[e]) if (t) { var a = this.hooks[e].indexOf(t); a > -1 && this.hooks[e].splice(a, 1) } else this.hooks[e] = [] }, dispatch: function () { var t = arguments[0].replace(/^on/i, "").toLowerCase(), a = Array.prototype.slice.call(arguments, 1); if (this.hooks[t] && this.hooks[t].length) { for (var s = 0, i = this.hooks[t].length; i > s; s++) { var r = this.hooks[t][s]; "function" == typeof r ? r.apply(this, a) : "object" == typeof r && 2 == r.length ? r[0][r[1]].apply(r[0], a) : e[r] && e[r].apply(e, a) } return !0 } return "error" == t && alert("Webcam.js Error: " + a[0]), !1 }, setSWFLocation: function (e) { this.set("swfURL", e) }, detectFlash: function () { var t = "Shockwave Flash", a = "ShockwaveFlash.ShockwaveFlash", s = "application/x-shockwave-flash", i = e, r = navigator, o = !1; if ("undefined" != typeof r.plugins && "object" == typeof r.plugins[t]) { var h = r.plugins[t].description; h && "undefined" != typeof r.mimeTypes && r.mimeTypes[s] && r.mimeTypes[s].enabledPlugin && (o = !0) } else if ("undefined" != typeof i.ActiveXObject) try { var n = new ActiveXObject(a); if (n) { var l = n.GetVariable("$version"); l && (o = !0) } } catch (c) { } return o }, getSWFHTML: function () { var t = "", a = this.params.swfURL; if (location.protocol.match(/file/)) return this.dispatch("error", "Flash does not work from local disk.  Please run from a web server."), '<h3 style="color:red">ERROR: the Webcam.js Flash fallback does not work from local disk.  Please run it from a web server.</h3>'; if (!this.detectFlash()) return this.dispatch("error", "Adobe Flash Player not found.  Please install from get.adobe.com/flashplayer and try again."), '<h3 style="color:red">' + this.params.flashNotDetectedText + "</h3>"; if (!a) { for (var s = "", i = document.getElementsByTagName("script"), r = 0, o = i.length; o > r; r++) { var h = i[r].getAttribute("src"); h && h.match(/\/webcam(\.min)?\.js/) && (s = h.replace(/\/webcam(\.min)?\.js.*$/, ""), r = o) } a = s ? s + "/webcam.swf" : "webcam.swf" } e.localStorage && !localStorage.getItem("visited") && (this.params.new_user = 1, localStorage.setItem("visited", 1)); var n = ""; for (var l in this.params) n && (n += "&"), n += l + "=" + escape(this.params[l]); return t += '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" type="application/x-shockwave-flash" codebase="' + this.protocol + '://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="' + this.params.width + '" height="' + this.params.height + '" id="webcam_movie_obj" align="middle"><param name="wmode" value="opaque" /><param name="allowScriptAccess" value="always" /><param name="allowFullScreen" value="false" /><param name="movie" value="' + a + '" /><param name="loop" value="false" /><param name="menu" value="false" /><param name="quality" value="best" /><param name="bgcolor" value="#ffffff" /><param name="flashvars" value="' + n + '"/><embed id="webcam_movie_embed" src="' + a + '" wmode="opaque" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="' + this.params.width + '" height="' + this.params.height + '" name="webcam_movie_embed" align="middle" allowScriptAccess="always" allowFullScreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="' + n + '"></embed></object>' }, getMovie: function () { if (!this.loaded) return this.dispatch("error", "Flash Movie is not loaded yet"); var e = document.getElementById("webcam_movie_obj"); return e && e._snap || (e = document.getElementById("webcam_movie_embed")), e || this.dispatch("error", "Cannot locate Flash movie in DOM"), e }, freeze: function () { var e = this, t = this.params; this.preview_active && this.unfreeze(); var a = this.params.width / this.params.dest_width, s = this.params.height / this.params.dest_height; this.unflip(); var i = t.crop_width || t.dest_width, r = t.crop_height || t.dest_height, o = document.createElement("canvas"); o.width = i, o.height = r; var h = o.getContext("2d"); this.preview_canvas = o, this.preview_context = h, (1 != a || 1 != s) && (o.style.webkitTransformOrigin = "0px 0px", o.style.mozTransformOrigin = "0px 0px", o.style.msTransformOrigin = "0px 0px", o.style.oTransformOrigin = "0px 0px", o.style.transformOrigin = "0px 0px", o.style.webkitTransform = "scaleX(" + a + ") scaleY(" + s + ")", o.style.mozTransform = "scaleX(" + a + ") scaleY(" + s + ")", o.style.msTransform = "scaleX(" + a + ") scaleY(" + s + ")", o.style.oTransform = "scaleX(" + a + ") scaleY(" + s + ")", o.style.transform = "scaleX(" + a + ") scaleY(" + s + ")"), this.snap(function () { o.style.position = "relative", o.style.left = "" + e.container.scrollLeft + "px", o.style.top = "" + e.container.scrollTop + "px", e.container.insertBefore(o, e.peg), e.container.style.overflow = "hidden", e.preview_active = !0 }, o) }, unfreeze: function () { this.preview_active && (this.container.removeChild(this.preview_canvas), delete this.preview_context, delete this.preview_canvas, this.preview_active = !1, this.flip()) }, flip: function () { if (this.params.flip_horiz) { var e = this.container.style; e.webkitTransform = "scaleX(-1)", e.mozTransform = "scaleX(-1)", e.msTransform = "scaleX(-1)", e.oTransform = "scaleX(-1)", e.transform = "scaleX(-1)", e.filter = "FlipH", e.msFilter = "FlipH" } }, unflip: function () { if (this.params.flip_horiz) { var e = this.container.style; e.webkitTransform = "scaleX(1)", e.mozTransform = "scaleX(1)", e.msTransform = "scaleX(1)", e.oTransform = "scaleX(1)", e.transform = "scaleX(1)", e.filter = "", e.msFilter = "" } }, savePreview: function (e, t) { var a = this.params, s = this.preview_canvas, i = this.preview_context; if (t) { var r = t.getContext("2d"); r.drawImage(s, 0, 0) } e(t ? null : s.toDataURL("image/" + a.image_format, a.jpeg_quality / 100), s, i), this.unfreeze() }, snap: function (e, t) { var a = this.params; if (!this.loaded) return this.dispatch("error", "Webcam is not loaded yet"); if (!e) return this.dispatch("error", "Please provide a callback function or canvas to snap()"); if (this.preview_active) return this.savePreview(e, t), null; var s = document.createElement("canvas"); s.width = this.params.dest_width, s.height = this.params.dest_height; var i = s.getContext("2d"); this.params.flip_horiz && (i.translate(a.dest_width, 0), i.scale(-1, 1)); var r = function () { if (this.src && this.width && this.height && i.drawImage(this, 0, 0, a.dest_width, a.dest_height), a.crop_width && a.crop_height) { var r = document.createElement("canvas"); r.width = a.crop_width, r.height = a.crop_height; var o = r.getContext("2d"); o.drawImage(s, Math.floor(a.dest_width / 2 - a.crop_width / 2), Math.floor(a.dest_height / 2 - a.crop_height / 2), a.crop_width, a.crop_height, 0, 0, a.crop_width, a.crop_height), i = o, s = r } if (t) { var h = t.getContext("2d"); h.drawImage(s, 0, 0) } e(t ? null : s.toDataURL("image/" + a.image_format, a.jpeg_quality / 100), s, i) }; if (this.userMedia) i.drawImage(this.video, 0, 0, this.params.dest_width, this.params.dest_height), r(); else { var o = this.getMovie()._snap(), h = new Image; h.onload = r, h.src = "data:image/" + this.params.image_format + ";base64," + o } return null }, configure: function (e) { e || (e = "camera"), this.getMovie()._configure(e) }, flashNotify: function (e, t) { switch (e) { case "flashLoadComplete": this.loaded = !0, this.dispatch("load"); break; case "cameraLive": this.live = !0, this.dispatch("live"), this.flip(); break; case "error": this.dispatch("error", t) } }, b64ToUint6: function (e) { return e > 64 && 91 > e ? e - 65 : e > 96 && 123 > e ? e - 71 : e > 47 && 58 > e ? e + 4 : 43 === e ? 62 : 47 === e ? 63 : 0 }, base64DecToArr: function (e, t) { for (var a, s, i = e.replace(/[^A-Za-z0-9\+\/]/g, ""), r = i.length, o = t ? Math.ceil((3 * r + 1 >> 2) / t) * t : 3 * r + 1 >> 2, h = new Uint8Array(o), n = 0, l = 0, c = 0; r > c; c++) if (s = 3 & c, n |= this.b64ToUint6(i.charCodeAt(c)) << 18 - 6 * s, 3 === s || r - c === 1) { for (a = 0; 3 > a && o > l; a++, l++) h[l] = n >>> (16 >>> a & 24) & 255; n = 0 } return h }, upload: function (e, t, s) { var i = this.params.upload_name || "webcam", r = ""; if (!e.match(/^data\:image\/(\w+)/)) throw "Cannot locate image format in Data URI"; r = RegExp.$1; var o = e.replace(/^data\:image\/\w+\;base64\,/, ""), h = new XMLHttpRequest; h.open("POST", t, !0), h.upload && h.upload.addEventListener && h.upload.addEventListener("progress", function (e) { if (e.lengthComputable) { var t = e.loaded / e.total; a.dispatch("uploadProgress", t, e) } }, !1); var n = this; h.onload = function () { s && s.apply(n, [h.status, h.responseText, h.statusText]), a.dispatch("uploadComplete", h.status, h.responseText, h.statusText) }; var l = new Blob([this.base64DecToArr(o)], { type: "image/" + r }), c = new FormData; c.append(i, l, i + "." + r.replace(/e/, "")), h.send(c) } }; a.init(), "function" == typeof define && define.amd ? define(function () { return a }) : "object" == typeof module && module.exports ? module.exports = a : e.Webcam = a }(window);